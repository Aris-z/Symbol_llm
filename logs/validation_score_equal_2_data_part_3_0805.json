[
    {
        "code_id": 0,
        "validation_id": 3,
        "question": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "solution_code": "\ndef find_first_occurrence(arr, target): \n    for i, num in enumerate(arr): \n        if num == target: \n            return i\n    return None\n",
        "response": "[PYTHON]\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 7) == -1\n[PYTHON]",
        "target": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result",
        "logprobs": -0.05260341456459777,
        "test_list": [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ]
    },
    {
        "code_id": 5,
        "validation_id": 1,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(arr): \n    result = 0\n    for i in range(len(arr)): \n        accumulator = 1\n        for j in range(i,len(arr)): \n            accumulator = accumulator * (arr[j])\n            result += accumulator\n    return result \n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84\nassert sum_Of_Subarray_Prod([1,2,3,4],0) == 0\nassert sum_Of_Subarray_Prod([1,2,3,4],3) == 20\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.1605313696565566,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 5,
        "validation_id": 2,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(arr): \n    result = 0\n    for i in range(len(arr)): \n        accumulator = 1\n        for j in range(i,len(arr)): \n            accumulator = accumulator * (arr[j])\n            result += accumulator\n    return result \n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1, 2, 3, 4], 4) == 84\nassert sum_Of_Subarray_Prod([1, 2, 3], 3) == 20\nassert sum_Of_Subarray_Prod([1, 2], 2) == 5    \n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.1541327339495918,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 6,
        "validation_id": 0,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,n):\n    sum = 0 \n    for i in range(n):\n        sum = sum + (reduce(lambda x,y: x + (y[0] * y[1]), A[:i]) * reduce(lambda x,y: x + y[1], A[i:]))\n    return sum\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.020913386176949645,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 6,
        "validation_id": 1,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,n):\n    sum = 0 \n    for i in range(n):\n        sum = sum + (reduce(lambda x,y: x + (y[0] * y[1]), A[:i]) * reduce(lambda x,y: x + y[1], A[i:]))\n    return sum\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1, 2, 3], 3) == 20\nassert sum_Of_Subarray_Prod([1, 2], 2) == 5\nassert sum_Of_Subarray_Prod([1, 2, 3, 4], 4) == 84\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.0437637498432146,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 6,
        "validation_id": 2,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,n):\n    sum = 0 \n    for i in range(n):\n        sum = sum + (reduce(lambda x,y: x + (y[0] * y[1]), A[:i]) * reduce(lambda x,y: x + y[1], A[i:]))\n    return sum\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1],1) == 1\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.09128579126958851,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 7,
        "validation_id": 0,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,n):\n    total = 0\n    for i in range(0,len(A)):\n        temp = product(A[i-1:i+1])\n        total += int(temp)\n    return total\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.019221447967149058,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 7,
        "validation_id": 1,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,n):\n    total = 0\n    for i in range(0,len(A)):\n        temp = product(A[i-1:i+1])\n        total += int(temp)\n    return total\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.09100557175424871,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 7,
        "validation_id": 2,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,n):\n    total = 0\n    for i in range(0,len(A)):\n        temp = product(A[i-1:i+1])\n        total += int(temp)\n    return total\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.09100557175424871,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 7,
        "validation_id": 3,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,n):\n    total = 0\n    for i in range(0,len(A)):\n        temp = product(A[i-1:i+1])\n        total += int(temp)\n    return total\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1,2,3,4],4)==84\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.15449796536436028,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 7,
        "validation_id": 4,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,n):\n    total = 0\n    for i in range(0,len(A)):\n        temp = product(A[i-1:i+1])\n        total += int(temp)\n    return total\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.08136041335360623,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 9,
        "validation_id": 0,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,N): \n    mutableList = [0] * N \n    for i in range(len(A)):\n        mutableList = [list(range(A[i],A[i] + 1)), mutableList[0] + A[i]]\n    return sum(mutableList)\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.11420687041816616,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 9,
        "validation_id": 1,
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "solution_code": "\ndef sum_Of_Subarray_Prod(A,N): \n    mutableList = [0] * N \n    for i in range(len(A)):\n        mutableList = [list(range(A[i],A[i] + 1)), mutableList[0] + A[i]]\n    return sum(mutableList)\n",
        "response": "[PYTHON]\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84\nassert sum_Of_Subarray_Prod([1,2,3],3) == 20\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "logprobs": -0.07002935141040356,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ]
    },
    {
        "code_id": 10,
        "validation_id": 0,
        "question": "Write a python function to toggle bits of the number except the first and the last bit.",
        "solution_code": "\ndef toggle_middle_bits(A): \n    result = (A // 2) + (A % 2 == 0)\n    return result\n",
        "response": "[PYTHON]\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\n[PYTHON]",
        "target": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ",
        "logprobs": -0.01942504243994767,
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ]
    },
    {
        "code_id": 10,
        "validation_id": 3,
        "question": "Write a python function to toggle bits of the number except the first and the last bit.",
        "solution_code": "\ndef toggle_middle_bits(A): \n    result = (A // 2) + (A % 2 == 0)\n    return result\n",
        "response": "[PYTHON]\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(1) == 1\n[PYTHON]",
        "target": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ",
        "logprobs": -0.2615630595282685,
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ]
    },
    {
        "code_id": 11,
        "validation_id": 0,
        "question": "Write a python function to toggle bits of the number except the first and the last bit.",
        "solution_code": "\ndef toggle_middle_bits(n): \n    result = 0\n    for i in range(1, len(bin(n)) - 1): \n        result = (result << 1) + (bin(n)[i]) & 2\n    return result\n",
        "response": "[PYTHON]\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\n[PYTHON]",
        "target": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ",
        "logprobs": -0.01843003131099229,
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ]
    },
    {
        "code_id": 11,
        "validation_id": 1,
        "question": "Write a python function to toggle bits of the number except the first and the last bit.",
        "solution_code": "\ndef toggle_middle_bits(n): \n    result = 0\n    for i in range(1, len(bin(n)) - 1): \n        result = (result << 1) + (bin(n)[i]) & 2\n    return result\n",
        "response": "[PYTHON]\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\n[PYTHON]",
        "target": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ",
        "logprobs": -0.01843003131099229,
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ]
    },
    {
        "code_id": 11,
        "validation_id": 2,
        "question": "Write a python function to toggle bits of the number except the first and the last bit.",
        "solution_code": "\ndef toggle_middle_bits(n): \n    result = 0\n    for i in range(1, len(bin(n)) - 1): \n        result = (result << 1) + (bin(n)[i]) & 2\n    return result\n",
        "response": "[PYTHON]\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\n[PYTHON]",
        "target": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ",
        "logprobs": -0.08204890815323546,
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ]
    },
    {
        "code_id": 11,
        "validation_id": 3,
        "question": "Write a python function to toggle bits of the number except the first and the last bit.",
        "solution_code": "\ndef toggle_middle_bits(n): \n    result = 0\n    for i in range(1, len(bin(n)) - 1): \n        result = (result << 1) + (bin(n)[i]) & 2\n    return result\n",
        "response": "[PYTHON]\nassert toggle_middle_bits(9) == 15 \nassert toggle_middle_bits(10) == 12 \nassert toggle_middle_bits(11) == 13 \n[PYTHON]",
        "target": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ",
        "logprobs": -0.07398351739393844,
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ]
    },
    {
        "code_id": 12,
        "validation_id": 0,
        "question": "Write a python function to toggle bits of the number except the first and the last bit.",
        "solution_code": "\ndef toggle_middle_bits(number): \n    result = number \n    for i in range(1,len(str(number))-1): \n        result = (result & (1 << (i-1))) | (number & (1 << (len(str(number)) - 1 - i)))\n    return result\n",
        "response": "[PYTHON]\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\n[PYTHON]",
        "target": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ",
        "logprobs": -0.02022925522691982,
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ]
    }
]