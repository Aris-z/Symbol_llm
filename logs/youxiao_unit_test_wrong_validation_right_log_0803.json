[
    {
        "question": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "[PYTHON]\ndef find_first_occurrence(arr, value): \n    for index, element in enumerate(arr): \n        if element == value: \n            return index\n        elif element > value: \n            return None\n    return None\n[PYTHON]",
        "test_list": [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ],
        "unit_test": "[PYTHON]\nassert find_first_occurrence([1, 2, 2, 3, 3, 3, 4, 5], 4) == 6\nassert find_first_occurrence([1, 2, 3, 3, 3, 4, 5], 0) == -1\nassert find_first_occurrence([1, 2, 3, 3, 3, 4, 5], 3) == 2\n[PYTHON]",
        "target": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result",
        "ground_truth": true
    },
    {
        "question": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "[PYTHON]\ndef find_first_occurrence(A,B): \n    x = 0\n    for i in range(len(A)): \n        if (A[i] == B): \n            x= i\n    return (x)\n[PYTHON]",
        "test_list": [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ],
        "unit_test": "[PYTHON]\nassert find_first_occurrence([1, 5, 8, 11, 12], 5) == 1\n[PYTHON]",
        "target": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result",
        "ground_truth": false
    },
    {
        "question": "Write a python function to find sum of products of all possible subarrays.",
        "code": "[PYTHON]\ndef sum_Of_Subarray_Prod(arr1,n): \n    return sum(arr1[i][:n] * arr1[i+1][n:]) \n[PYTHON]",
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ],
        "unit_test": "[PYTHON]\nassert sum([1, 2, 3]) == 6\nassert sum([1, 2, 3, 4]) == 10\n[PYTHON]",
        "target": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "ground_truth": false
    },
    {
        "question": "Write a function to locate the left insertion point for a specified value in sorted order.",
        "code": "[PYTHON]\ndef left_insertion(A,B): \n    for i in range(len(A)): \n        if(A[i] == B): \n            return i\n    return -1\n[PYTHON]",
        "test_list": [
            "assert left_insertion([1,2,4,5],6)==4",
            "assert left_insertion([1,2,4,5],3)==2",
            "assert left_insertion([1,2,4,5],7)==4"
        ],
        "unit_test": "[PYTHON]\nassert left_insertion([1,2,3,4,5,6], 4) == 3\n[PYTHON]",
        "target": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i",
        "ground_truth": false
    },
    {
        "question": "Write a function to locate the left insertion point for a specified value in sorted order.",
        "code": "[PYTHON]\ndef left_insertion(A,B): \n    for i in range(len(A)): \n        if(A[i] == B): \n            return i\n    return -1\n[PYTHON]",
        "test_list": [
            "assert left_insertion([1,2,4,5],6)==4",
            "assert left_insertion([1,2,4,5],3)==2",
            "assert left_insertion([1,2,4,5],7)==4"
        ],
        "unit_test": "[PYTHON]\nassert left_insertion([1,3,5,7,9],5)==2\n[PYTHON]",
        "target": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i",
        "ground_truth": false
    },
    {
        "question": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
        "code": "[PYTHON]\ndef divisible_by_digits(n): \n    result = [] \n    for i in range(1,n+1): \n        for j in range(n): \n            if(i % j == 0): \n                result.append(i) \n    return result\n[PYTHON]",
        "test_list": [
            "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
            "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
            "assert divisible_by_digits(20,25)==[22, 24]"
        ],
        "unit_test": "[PYTHON]\n[PYTHON]\n assert divisible_by_digits(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9] \n[PYTHON]",
        "target": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",
        "ground_truth": false
    },
    {
        "question": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
        "code": "[PYTHON]\nimport re\ndef capital_words_spaces(text): \n    return(re.sub(\"\\b[A-Z][^A-Z]*\\b\", \" \",text))\n[PYTHON]",
        "test_list": [
            "assert capital_words_spaces(\"Python\") == 'Python'",
            "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
            "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
        ],
        "unit_test": "[PYTHON]\nassert capital_words_spaces(\"Hello World; Hello\") == \"Hello World; Hello\"\n[PYTHON]",
        "target": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)",
        "ground_truth": false
    },
    {
        "question": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
        "code": "[PYTHON]\nimport re\ndef capital_words_spaces(text): \n    return(re.sub(\"\\b[A-Z][^A-Z]*\\b\", \" \",text))\n[PYTHON]",
        "test_list": [
            "assert capital_words_spaces(\"Python\") == 'Python'",
            "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
            "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
        ],
        "unit_test": "[PYTHON]\nassert capital_words_spaces(\"smith Jones\") == \"smith Jones\"\n[PYTHON]",
        "target": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)",
        "ground_truth": false
    },
    {
        "question": "Write a function to find the nth jacobsthal number.",
        "code": "[PYTHON]\ndef jacobsthal_num(n): \n    return(n * (n + 1)) / 2\n[PYTHON]",
        "test_list": [
            "assert jacobsthal_num(5) == 11",
            "assert jacobsthal_num(2) == 1",
            "assert jacobsthal_num(4) == 5"
        ],
        "unit_test": "[PYTHON]\nassert jacobsthal_num(1) == 1 \n[PYTHON]",
        "target": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]",
        "ground_truth": false
    },
    {
        "question": "Write a function to find the nth jacobsthal number.",
        "code": "[PYTHON]\nimport math\ndef jacobsthal_num(n): \n    return math.cos(math.pi * (n - 1)**2)\n[PYTHON]",
        "test_list": [
            "assert jacobsthal_num(5) == 11",
            "assert jacobsthal_num(2) == 1",
            "assert jacobsthal_num(4) == 5"
        ],
        "unit_test": "[PYTHON]\nassert jacobsthal_num(1) == 1\n[PYTHON]",
        "target": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]",
        "ground_truth": false
    },
    {
        "question": "Write a function to find common index elements from three lists.",
        "code": "[PYTHON]\ndef extract_index_list(main, secondary, third): \n    list=[];count = 0\n    for i in range(len(secondary)): \n        if (secondary[i] in third): \n            list.append(main[count])\n            count += 1\n    return list\n[PYTHON]",
        "test_list": [
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
            "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
        ],
        "unit_test": "[PYTHON]\nassert extract_index_list([1, 2, 3], [1, 2], [1]) == [1]\nassert extract_index_list([1, 2, 3], [4, 5], [6]) == []\n[PYTHON]",
        "target": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result",
        "ground_truth": false
    },
    {
        "question": "Write a function to find the second smallest number in a list.",
        "code": "[PYTHON]\ndef second_smallest( numbers): \n    arr = sorted(numbers)\n    return arr[1]\n[PYTHON]",
        "test_list": [
            "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
            "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
            "assert second_smallest([2,2])==None"
        ],
        "unit_test": "[PYTHON]\nassert second_smallest([1, 2, 3]) == 2\n[PYTHON]",
        "target": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ",
        "ground_truth": false
    },
    {
        "question": "Write a function to find the second smallest number in a list.",
        "code": "[PYTHON]\ndef second_smallest( numbers): \n    arr = sorted(numbers)\n    return arr[1]\n[PYTHON]",
        "test_list": [
            "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
            "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
            "assert second_smallest([2,2])==None"
        ],
        "unit_test": "[PYTHON]\nassert second_smallest([4, 5, 2, 7, 3]) == 3\n[PYTHON]",
        "target": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ",
        "ground_truth": false
    },
    {
        "question": "Write a function that matches a string that has an a followed by zero or one 'b'.",
        "code": "[PYTHON]\ndef text_match_zero_one(text): \n    return any(ch=='a' and ch!='b' for ch in text)\n[PYTHON]",
        "test_list": [
            "assert text_match_zero_one(\"ac\")==('Found a match!')",
            "assert text_match_zero_one(\"dc\")==('Not matched!')",
            "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
        ],
        "unit_test": "[PYTHON]\nassert text_match_zero_one(\"a\")\nassert text_match_zero_one(\"ab\")\nassert text_match_zero_one(\"ac\")\n[PYTHON]",
        "target": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "ground_truth": false
    },
    {
        "question": "Write a function that matches a string that has an a followed by zero or one 'b'.",
        "code": "[PYTHON]\ndef text_match_zero_one(text): \n    return any(ch=='a' and ch!='b' for ch in text)\n[PYTHON]",
        "test_list": [
            "assert text_match_zero_one(\"ac\")==('Found a match!')",
            "assert text_match_zero_one(\"dc\")==('Not matched!')",
            "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
        ],
        "unit_test": "[PYTHON]\nassert text_match_zero_one('a')\nassert text_match_zero_one('ab')\n\n[PYTHON]",
        "target": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "ground_truth": false
    },
    {
        "question": "Write a python function to check whether an array contains only one distinct element or not.",
        "code": "[PYTHON]\ndef unique_Element(arr,size): \n    count = 1\n    for i in range(len(arr)): \n        if(arr[i] != arr[i - 1]): \n            count = 1\n        else: \n            count = 0\n        if count == 1: \n            return 'NO'\n[PYTHON]",
        "test_list": [
            "assert unique_Element([1,1,1],3) == 'YES'",
            "assert unique_Element([1,2,1,2],4) == 'NO'",
            "assert unique_Element([1,2,3,4,5],5) == 'NO'"
        ],
        "unit_test": "[PYTHON]\nassert unique_Element([1,2,3,4],4)=='NO'\n[PYTHON]",
        "target": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')",
        "ground_truth": false
    },
    {
        "question": "Write a python function to find the minimum difference between any two elements in a given array.",
        "code": "[PYTHON]\ndef find_Min_Diff(A,B): \n    array = sorted(list(set(A))) \n    array.sort()\n    return(array[0])\n[PYTHON]",
        "test_list": [
            "assert find_Min_Diff((1,5,3,19,18,25),6) == 1",
            "assert find_Min_Diff((4,3,2,6),4) == 1",
            "assert find_Min_Diff((30,5,20,9),4) == 4"
        ],
        "unit_test": "[PYTHON]\nassert(find_Min_Diff([1, 2, 6, 8], 3) == 1)\n[PYTHON]",
        "target": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ",
        "ground_truth": false
    },
    {
        "question": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.",
        "code": "[PYTHON] \ndef get_Pairs_Count(arr, n, sum): \n    max_sum = int(n * (n + 1) // 2)\n    result = 0 \n    for i in range(min(n,len(arr))): \n        if arr[i] + arr[i+1] == sum: \n            result += 1\n    return(result)\n[PYTHON]",
        "test_list": [
            "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
            "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
            "assert get_Pairs_Count([1,-2,3],3,1) == 1"
        ],
        "unit_test": "[PYTHON]\nassert get_Pairs_Count([], 0, 0) == 0\n[PYTHON]",
        "target": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count",
        "ground_truth": false
    },
    {
        "question": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.",
        "code": "[PYTHON]\ndef get_Pairs_Count(A,B,C): \n    L=[] \n    for i in range(A): \n        for j in range(B): \n            element = (i+1) * (j+1) \n    \n    for j in range (len(A)): \n        L.append(element[j])\n    \n    return (len(L))\n[PYTHON]",
        "test_list": [
            "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
            "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
            "assert get_Pairs_Count([1,-2,3],3,1) == 1"
        ],
        "unit_test": "[PYTHON]\n[PYTHON]",
        "target": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count",
        "ground_truth": false
    },
    {
        "question": "Write a python function to check for odd parity of a given number.",
        "code": "[PYTHON]\ndef check_Odd_Parity(A): \n    if(A%2==0): \n        return False\n    else: \n        return True\n[PYTHON]",
        "test_list": [
            "assert check_Odd_Parity(13) == True",
            "assert check_Odd_Parity(21) == True",
            "assert check_Odd_Parity(18) == False"
        ],
        "unit_test": "[PYTHON]\nassert check_Odd_Parity(4) == True\n[PYTHON]",
        "target": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False",
        "ground_truth": true
    },
    {
        "question": "Write a python function to get the difference between two lists.",
        "code": "[PYTHON]\ndef Diff(L1,L2):\n    result = list(set(L1) - set(L2))\n    return result\n[PYTHON]",
        "test_list": [
            "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
            "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
            "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
        ],
        "unit_test": "[PYTHON]\nassert Diff([1,2,3,4], [3,4]) == [1,2]\n[PYTHON]",
        "target": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ",
        "ground_truth": false
    }
]