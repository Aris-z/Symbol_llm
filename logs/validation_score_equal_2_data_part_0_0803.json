[
    {
        "code_id": 8,
        "validation_id": 0,
        "question": "Write a function to find the similar elements from the given two tuple lists.",
        "solution_code": "\ndef similar_elements(List1: tuple, List2: tuple): \n   identical = [i for i in List1 if i in List2] \n   return identical \n",
        "response": "[PYTHON]\nassert similar_elements((1, 2, 3), (3, 4, 5)) == (3, )\n[PYTHON]",
        "target": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
        "logprobs": -0.17297731050434992,
        "test_list": [
            "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)",
            "assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)",
            "assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)"
        ]
    },
    {
        "code_id": 8,
        "validation_id": 1,
        "question": "Write a function to find the similar elements from the given two tuple lists.",
        "solution_code": "\ndef similar_elements(List1: tuple, List2: tuple): \n   identical = [i for i in List1 if i in List2] \n   return identical \n",
        "response": "[PYTHON]\nassert similar_elements((1, 2, 3, 4, 5), (2, 4, 6, 8, 10)) == (2, 4)\nassert similar_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (1, 2, 3, 4, 5)\nassert similar_elements((1, 2, 3), (2, 3, 4)) == (2, 3)\n[PYTHON]",
        "target": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
        "logprobs": -0.12681243405735013,
        "test_list": [
            "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)",
            "assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)",
            "assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)"
        ]
    },
    {
        "code_id": 9,
        "validation_id": 1,
        "question": "Write a function to find the similar elements from the given two tuple lists.",
        "solution_code": "\ndef similar_elements(A,B):\n    for i in range(len(A)):\n        value=None\n        for j in range(len(B)):\n            if(value is None or (A[i] == B[j]==A[i])): \n                value=A[i]\n        return (value,A[i])\n",
        "response": "[PYTHON]\nassert similar_elements((\"a\", \"b\", \"c\", \"d\"), (\"e\", \"f\", \"g\", \"a\")) == (\"a\",)\n[PYTHON]",
        "target": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
        "logprobs": -0.3503104753807021,
        "test_list": [
            "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)",
            "assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)",
            "assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)"
        ]
    },
    {
        "code_id": 10,
        "validation_id": 2,
        "question": "Write a python function to identify non-prime numbers.",
        "solution_code": "\ndef is_not_prime(num): \n    for i in range(2, int(num**0.5) + 1): \n        if(num % i == 0): \n            return False\n    return True\n",
        "response": "[PYTHON]\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(7) == False\n[PYTHON]",
        "target": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "logprobs": -0.1913086338951954,
        "test_list": [
            "assert is_not_prime(2) == False",
            "assert is_not_prime(10) == True",
            "assert is_not_prime(35) == True"
        ]
    },
    {
        "code_id": 11,
        "validation_id": 3,
        "question": "Write a python function to identify non-prime numbers.",
        "solution_code": "\ndef is_not_prime(number): \n    return(number == 1 or number % 2 == 0)\n",
        "response": "[PYTHON] \nassert is_not_prime(2) == False\nassert is_not_prime(8) == True\n[PYTHON]",
        "target": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "logprobs": -0.4163394860351894,
        "test_list": [
            "assert is_not_prime(2) == False",
            "assert is_not_prime(10) == True",
            "assert is_not_prime(35) == True"
        ]
    },
    {
        "code_id": 11,
        "validation_id": 4,
        "question": "Write a python function to identify non-prime numbers.",
        "solution_code": "\ndef is_not_prime(number): \n    return(number == 1 or number % 2 == 0)\n",
        "response": "[PYTHON]\nassert is_not_prime(0)     == False\nassert is_not_prime(2)     == False\nassert is_not_prime(3)     == False\nassert is_not_prime(4)     == True\nassert is_not_prime(5)     == False\nassert is_not_prime(6)     == True\nassert is_not_prime(50)    == True\n[PYTHON]",
        "target": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "logprobs": -0.24599476963005018,
        "test_list": [
            "assert is_not_prime(2) == False",
            "assert is_not_prime(10) == True",
            "assert is_not_prime(35) == True"
        ]
    },
    {
        "code_id": 13,
        "validation_id": 3,
        "question": "Write a python function to identify non-prime numbers.",
        "solution_code": "\ndef is_not_prime(n): \n    for i in range(2,n): \n        x = n % i  \n        if not (x == 1 or x == n - 1): \n            return False \n    return True\n",
        "response": "[PYTHON]\nassert is_not_prime(2)  == False # 2 is prime\nassert is_not_prime(3)  == False # 3 is prime\nassert is_not_prime(4)  == True  # 4 is not prime\nassert is_not_prime(5)  == False # 5 is prime\nassert is_not_prime(10) == True  # 10 is not prime\n[PYTHON]",
        "target": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "logprobs": -0.18424121007992397,
        "test_list": [
            "assert is_not_prime(2) == False",
            "assert is_not_prime(10) == True",
            "assert is_not_prime(35) == True"
        ]
    },
    {
        "code_id": 15,
        "validation_id": 0,
        "question": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
        "solution_code": "\ndef heap_queue_largest(arr,size): \n    heap = []\n    for i in range(size):\n        heap.append(arr[i]) \n    heap.sort(heap)\n    return(heap[0:size])\n",
        "response": "[PYTHON]\nassert heap_queue_largest([1,2,3,4,5],5)==[5,4,3,2,1]\n[PYTHON]",
        "target": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "logprobs": -0.15408333923460982,
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ]
    },
    {
        "code_id": 15,
        "validation_id": 1,
        "question": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
        "solution_code": "\ndef heap_queue_largest(arr,size): \n    heap = []\n    for i in range(size):\n        heap.append(arr[i]) \n    heap.sort(heap)\n    return(heap[0:size])\n",
        "response": "[PYTHON]\nassert heap_queue_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [9, 8, 7]\n[PYTHON]",
        "target": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "logprobs": -0.13436465550240118,
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ]
    },
    {
        "code_id": 15,
        "validation_id": 2,
        "question": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
        "solution_code": "\ndef heap_queue_largest(arr,size): \n    heap = []\n    for i in range(size):\n        heap.append(arr[i]) \n    heap.sort(heap)\n    return(heap[0:size])\n",
        "response": "[PYTHON]\nassert heap_queue_largest([1,4,5,7],3) == [7,5,4]  \n[PYTHON]",
        "target": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "logprobs": -0.4917818779757863,
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ]
    },
    {
        "code_id": 15,
        "validation_id": 4,
        "question": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
        "solution_code": "\ndef heap_queue_largest(arr,size): \n    heap = []\n    for i in range(size):\n        heap.append(arr[i]) \n    heap.sort(heap)\n    return(heap[0:size])\n",
        "response": "[PYTHON]\nassert heap_queue_largest([3,4,5,1,2],3) #returns [3,4,5]\nassert heap_queue_largest([6,6,3,3,2,1,8,7],4) #returns [8,7,6,6]\n[PYTHON]",
        "target": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "logprobs": -0.649448558451931,
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ]
    },
    {
        "code_id": 16,
        "validation_id": 3,
        "question": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
        "solution_code": "\nfrom heapq import heapify, heappop, heappush\ndef heap_queue_largest(list,size): \n    size = len(list)\n    for i in range(size-1, -1, -1): \n        heapify(list[i:])\n    return list[0:size]\n",
        "response": "[PYTHON]\nassert heap_queue_largest([3, 5, 1, 6, 2, 4], 6) == [6, 5, 4, 3, 2, 1]\nassert heap_queue_largest([5, 6, 12, 10, 1], 5) == [12, 10, 6, 5, 1]\n[PYTHON]",
        "target": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "logprobs": -0.31013237348596184,
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ]
    },
    {
        "code_id": 16,
        "validation_id": 4,
        "question": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
        "solution_code": "\nfrom heapq import heapify, heappop, heappush\ndef heap_queue_largest(list,size): \n    size = len(list)\n    for i in range(size-1, -1, -1): \n        heapify(list[i:])\n    return list[0:size]\n",
        "response": "[PYTHON]\nassert heap_queue_largest([1,2,3,4,5,6], 3) == [6, 5, 4]\nassert heap_queue_largest([4,6,2,5,1,3], 3) == [6, 5, 4]\nassert heap_queue_largest([7,2,10,0,9,8], 2) == [10, 9]\n[PYTHON]",
        "target": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "logprobs": -0.4034306174784577,
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ]
    },
    {
        "code_id": 17,
        "validation_id": 0,
        "question": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
        "solution_code": "\nimport heapq\ndef heap_queue_largest(arr,k): \n    res =[]; i =0\n    while (i < k): \n        res.append(arr[i]) \n        i +=1\n    return res\n",
        "response": "[PYTHON]\nassert heap_queue_largest([1, 2, 3, 4, 5], 3) == [5, 4, 3]\n[PYTHON]",
        "target": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "logprobs": -0.12981683052545917,
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ]
    },
    {
        "code_id": 17,
        "validation_id": 2,
        "question": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
        "solution_code": "\nimport heapq\ndef heap_queue_largest(arr,k): \n    res =[]; i =0\n    while (i < k): \n        res.append(arr[i]) \n        i +=1\n    return res\n",
        "response": "[PYTHON]\nassert(heap_queue_largest([9,10,5,7,12,4,8,5,21,11], 4) ==  [21,12,11,10] )\n[PYTHON]",
        "target": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "logprobs": -0.8206498192496959,
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ]
    },
    {
        "code_id": 28,
        "validation_id": 0,
        "question": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "solution_code": "\ndef differ_At_One_Bit_Pos(A,B): \n    size = 10\n    if(A == B): \n        return False \n    else: \n        return(any([(x ^ y) == 1 for x,y in zip(A,B[:size])]))\n",
        "response": "[PYTHON]\nassert differ_At_One_Bit_Pos(1,3) == True\n[PYTHON]",
        "target": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)",
        "logprobs": -0.20773151622311442,
        "test_list": [
            "assert differ_At_One_Bit_Pos(13,9) == True",
            "assert differ_At_One_Bit_Pos(15,8) == False",
            "assert differ_At_One_Bit_Pos(2,4) == False"
        ]
    },
    {
        "code_id": 28,
        "validation_id": 2,
        "question": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "solution_code": "\ndef differ_At_One_Bit_Pos(A,B): \n    size = 10\n    if(A == B): \n        return False \n    else: \n        return(any([(x ^ y) == 1 for x,y in zip(A,B[:size])]))\n",
        "response": "[PYTHON]\nassert differ_At_One_Bit_Pos(0b010, 0b000) == True\nassert differ_At_One_Bit_Pos(0b000, 0b010) == True\nassert differ_At_One_Bit_Pos(0b000, 0b111) == False\n[PYTHON]",
        "target": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)",
        "logprobs": -0.24154762838829402,
        "test_list": [
            "assert differ_At_One_Bit_Pos(13,9) == True",
            "assert differ_At_One_Bit_Pos(15,8) == False",
            "assert differ_At_One_Bit_Pos(2,4) == False"
        ]
    },
    {
        "code_id": 35,
        "validation_id": 0,
        "question": "Write a function to find squares of individual elements in a list using lambda function.",
        "solution_code": "\ndef square_nums(nums): \n    return(lambda num: num**2 for num in nums)\n",
        "response": "[PYTHON]\nassert list(square_nums([1, 2, 3, 4, 5])) == [1, 4, 9, 16, 25]\n[PYTHON]",
        "target": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
        "logprobs": -0.06388242005030004,
        "test_list": [
            "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert square_nums([10,20,30])==([100,400,900])",
            "assert square_nums([12,15])==([144,225])"
        ]
    },
    {
        "code_id": 35,
        "validation_id": 1,
        "question": "Write a function to find squares of individual elements in a list using lambda function.",
        "solution_code": "\ndef square_nums(nums): \n    return(lambda num: num**2 for num in nums)\n",
        "response": "[PYTHON]\nassert list(square_nums([1,2,3,4,5])) == [1,4,9,16,25]\n[PYTHON]",
        "target": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
        "logprobs": -0.08469561237845961,
        "test_list": [
            "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert square_nums([10,20,30])==([100,400,900])",
            "assert square_nums([12,15])==([144,225])"
        ]
    },
    {
        "code_id": 35,
        "validation_id": 3,
        "question": "Write a function to find squares of individual elements in a list using lambda function.",
        "solution_code": "\ndef square_nums(nums): \n    return(lambda num: num**2 for num in nums)\n",
        "response": "[PYTHON]\nassert list(square_nums([1, 4, 8, 9, 16])) == [1, 16, 64, 81, 256]\n[PYTHON]",
        "target": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
        "logprobs": -0.21502285776768026,
        "test_list": [
            "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert square_nums([10,20,30])==([100,400,900])",
            "assert square_nums([12,15])==([144,225])"
        ]
    }
]